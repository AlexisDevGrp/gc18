package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gophercon/gc18/models"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Level)
// DB Table: Plural (levels)
// Resource: Plural (AdminLevels)
// Path: Plural (/admin/levels)
// View Template Folder: Plural (/templates/admin/levels/)

// AdminLevelsResource is the resource for the level model
type AdminLevelsResource struct {
	buffalo.Resource
}

// List gets all Levels. This function is mapped to the path
// GET /levels
func (v AdminLevelsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	levels := &models.Levels{}
	// You can order your list here. Just change
	err := tx.All(levels)
	// to:
	// err := tx.Order("create_at desc").All(levels)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Levels available inside the html template
	c.Set("levels", levels)
	return c.Render(200, r.HTML("admin/levels/index.html"))
}

// Show gets the data for one Level. This function is mapped to
// the path GET /admin/levels/{level_id}
func (v AdminLevelsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Level
	level := &models.Level{}
	// To find the Level the parameter admin_level_id is used.
	err := tx.Find(level, c.Param("admin_level_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make level available inside the html template
	c.Set("level", level)
	return c.Render(200, r.HTML("admin/levels/show.html"))
}

// New renders the formular for creating a new Level.
// This function is mapped to the path GET /admin/levels/new
func (v AdminLevelsResource) New(c buffalo.Context) error {
	// Make level available inside the html template
	c.Set("level", &models.Level{})
	return c.Render(200, r.HTML("admin/levels/new.html"))
}

// Create adds a Level to the DB. This function is mapped to the
// path POST /admin/levels
func (v AdminLevelsResource) Create(c buffalo.Context) error {
	// Allocate an empty Level
	level := &models.Level{}
	// Bind level to the html form elements
	err := c.Bind(level)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(level)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make level available inside the html template
		c.Set("level", level)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("admin/levels/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Level was created successfully")
	// and redirect to the levels index page
	return c.Redirect(302, "/admin/levels/%s", level.ID)
}

// Edit renders a edit formular for a level. This function is
// mapped to the path GET /admin/levels/{level_id}/edit
func (v AdminLevelsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Level
	level := &models.Level{}
	err := tx.Find(level, c.Param("admin_level_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make level available inside the html template
	c.Set("level", level)
	return c.Render(200, r.HTML("admin/levels/edit.html"))
}

// Update changes a level in the DB. This function is mapped to
// the path PUT /levels/{level_id}
func (v AdminLevelsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Level
	level := &models.Level{}
	err := tx.Find(level, c.Param("admin_level_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Level to the html form elements
	err = c.Bind(level)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(level)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make level available inside the html template
		c.Set("level", level)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("admin/levels/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Level was updated successfully")
	// and redirect to the levels index page
	return c.Redirect(302, "/admin/levels/%s", level.ID)
}

// Destroy deletes a level from the DB. This function is mapped
// to the path DELETE /admin/levels/{level_id}
func (v AdminLevelsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Level
	level := &models.Level{}
	// To find the Level the parameter level_id is used.
	err := tx.Find(level, c.Param("admin_level_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(level)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Level was destroyed successfully")
	// Redirect to the levels index page
	return c.Redirect(302, "/admin/levels")
}
